##############
# PROPERTIES #
##############

MY_PATH=$(dirname $0)
BUNDLE_DIR=$(dirname "$(readlink "${BASH_SOURCE[0]}")")
ACTION=LAUNCH
CURL_CONNECTION_REFUSED_CODE=7

#################
# CONFIGURATION #
#################

FITNESSE_PORT=8080
FITNESSE_EXECUTABLE_PATH=${BUNDLE_DIR}/fitnesse-standalone.jar
FITNESSE_ROOT_DIR=FitNesseRoot
FITNESSE_URL=http:"//localhost:${FITNESSE_PORT}/"
FITNESSE_TEST_OUTPUT=/tmp/Fitnesse-Test-Report.xml
FITNESSE_TIMEOUT_SECONDS=300
FITNESSE_ROOT=.
FITNESSE_TEST_SUITE=
VERBOSE=0

####################################
# Command Line Argument Processing #
####################################

while [ "$1" != "" ]; do

    case $1 in
		
		-p | --port )			shift
								FITNESSE_PORT=$1
                                ;;
								
		-d | --RootPath )		shift
								FITNESSE_ROOT=$1
								;;
								
		-x | --shutdown)		ACTION=SHUTDOWN
                                ;;
                                
        -b | --output)			shift
        						FITNESSE_TEST_OUTPUT=$1
        						;;
        						
        -t | --test )           shift
        						FITNESSE_TEST_SUITE=$1
        						ACTION=TEST
								;;
								
		-o | --open )			ACTION=OPEN
								;;

		-v | --verbose )        VERBOSE=1
								;;
								
		
		esac
		shift
done

###############
# Subroutines #
###############

function java_check {

    java -version

    if [ $? -eq 1 ]; then
        exit 1
    fi

}

function fitnesse_process_id {

	echo $(lsof -n -i4TCP:$FITNESSE_PORT | awk ' { print $2 }' | sed -n 2p)

}

function fitnesse_running {
	
	local FITNESSE_PID=$(fitnesse_process_id)
	
	if [ -n "$FITNESSE_PID" ]; then
		return 0
	else
		return 1
	fi
	
}

function fitnesse_shutdown {

	if fitnesse_running; then
		echo "[OSCP_CTL] FITNESSE: $FITNESSE_URL?shutdown (Process=$(fitnesse_process_id))"
		curl --silent "$FITNESSE_URL?shutdown" >/dev/null
		if [ -z  "$(fitnesse_process_id)" ]; then
			echo "[OCSP_CTL] Shutdown (Port:$FITNESSE_PORT) Succeeded"
		fi
	else
		echo "[OSCP_CTL] No Instance of Fitnesse Found Running on Port $FITNESSE_PORT."
	fi
	
}

function fitnesse_kill {

	$(fitnesse_process_id) | xargs kill -9
	
}

function fitnesse_check {

	if [ ! -f "${FITNESSE_EXECUTABLE_PATH}" ]; then
		echo "Fitnesse-Standalone.jar missing!"
    	echo "Download the latest fitnesse-standlalone.jar to the current directory from Fitnesse.org"
		select yn in "Goto http://fitnesse.org" "Not Now"; do
			case $yn in 
				"Goto http://fitnesse.org" ) open "http://fitnesse.org"; break;;
				"Not Now" ) break;;
			esac
		done
		popd 2>&1 > /dev/null
		exit 0
	fi

}

function fitnesse_start {
	echo "[OCSP_CTL] action=${ACTION}"
	echo "[OCSP_CTL] Jar=${FITNESSE_EXECUTABLE_PATH}"
	echo "[OCSP_CTL] Port=${FITNESSE_PORT}"
	echo "[OCSP_CTL] Timeout=${FITNESSE_TIMEOUT_SECONDS}"
	echo "[OCSP_CTL] RootPath=${FITNESSE_ROOT}"
	echo "[OCSP_CTL] FITNESSE: Launch"
	java -jar -Dslim.timeout=${FITNESSE_TIMEOUT_SECONDS} ${FITNESSE_EXECUTABLE_PATH} -e 0 -p ${FITNESSE_PORT} -d ${FITNESSE_ROOT} 2>/dev/null &
}

function fitnesse_wait {
	echo "[OCSP_CTL] FITNESSE: Waiting for Fitnesse..."
	local RESULT=$CURL_CONNECTION_REFUSED_CODE
	while [ $RESULT -eq $CURL_CONNECTION_REFUSED_CODE ] 
	do
		sleep 0.5
		curl -s "http://localhost:${FITNESSE_PORT}" > /dev/null 2>&1 
		RESULT=$?
	done
	echo "[OCSP_CTL] Fitnesse: Ready (curl exit code=$RESULT)"
}


function install_fitnesse_root_dir {
	local fitnesse_root_dir_project_path="$FITNESSE_ROOT/$FITNESSE_ROOT_DIR"
	if [ ! -d "$fitnesse_root_dir_project_path" ]; then
		echo "[OCSP_CTL] Preparing FitNesseRoot Folder"
		cp -r "$BUNDLE_DIR"/$FITNESSE_ROOT_DIR $FITNESSE_ROOT
	fi
}

function fitnesse_setup {
	install_fitnesse_root_dir
}

function fitnesse_main {

	pushd $MY_PATH 2>&1 > /dev/null
	
	# Check Java Exists	
	java_check
	
	# Check Fitnesse Exists
	fitnesse_check	
	
	# Enable Job Control
	set -o monitor
	
	# LAUNCH Fitnesse in the background, wait for it to begin responsding
	fitnesse_run
	
	local RETURN_RESULT=$?
	
	popd 2>&1 > /dev/null
	
	return $RETURN_RESULT
	
}

FITNESSE_MAIN_EXECUTED=0
FITNESSE_MAIN_ALREADY_RUNNING=1

function fitnesse_run {
	
	local MAIN_RESULT=-1
	
	if ! fitnesse_running; then 
		fitnesse_setup
		fitnesse_start
		fitnesse_wait
		MAIN_RESULT=0
	else 
		MAIN_RESULT=1
		echo "[OCSP_CTL] Fitnesse Running - $FITNESSE_URL"
	fi
	
	return $MAIN_RESULT
}

function fitnesse_open {
	
	fitnesse_running
	
	if [ 0 -eq $? ]; then
		echo  "[OCSP_CTL] Open Fitnesse at $FITNESSE_URL"
		open $FITNESSE_URL
	else
		echo  "[OCSP_CTL] Fitnesse is not Running. Aborted."
		echo  "[OCSP_CTL] Usage: ./LaunchFitnesse [--port PORT]"
	fi	
	

}

function fitnesse_launch_in_browser {
	fitnesse_main
	fitnesse_open
}

function fitnesse_generate_test_suite_report {
	
	fitnesse_main
	
	local MAIN_RESULT_CODE=$?
	
	fitnesse_write_suite_results
	
	if [ $MAIN_RESULT_CODE -eq $FITNESSE_MAIN_EXECUTED ]; then
		fitnesse_shutdown
	fi
}

function fitnesse_write_suite_results {

	mkdir -p $(dirname "$FITNESSE_TEST_OUTPUT")	
	REPORT_URL=$FITNESSE_URL$FITNESSE_TEST_SUITE\?suite\&format\=junit 
	
	echo "[OCSP_CTL] Run Test Suite: $FITNESSE_TEST_SUITE"
	echo "[OCSP_CTL] $REPORT_URL (Timeout=$(expr ${FITNESSE_TIMEOUT_SECONDS} / 60)m, Timestamp=$(date +%H:%M:%S))"
	
	curl -s -S -o "$FITNESSE_TEST_OUTPUT" "$REPORT_URL"
	DOWNLOAD_RESULT=$?
	echo "[OCSP_CTL] Test Output: " $(stat "$FITNESSE_TEST_OUTPUT" 2>&1 ) 
	
	if [ $DOWNLOAD_RESULT -eq 0 ]; then
		echo "[OCSP_CTL] Test Report Generated (curl exit code=$DOWNLOAD_RESULT)"
	else
		echo "[OCSP_CTL] ERROR: Download Test Report Failed (error=$DOWNLOAD_RESULT)"
	fi
	
	if [ $VERBOSE -eq 1 ]; then
		echo $(cat "$FITNESSE_TEST_OUTPUT")
	fi
	
}

########
# Main #
########

function main {

	case "$ACTION" in

	LAUNCH) 
		fitnesse_launch_in_browser
		echo  "[OCSP_CTL] Use --shutdown to stop Fitnesse"
		;;
		
	SHUTDOWN)  
		fitnesse_shutdown
		;;
		
	TEST)  
		fitnesse_generate_test_suite_report
		;;
		
	OPEN)
		fitnesse_open
		;;
		
	esac
	
}

main
exit 0

