#!/bin/sh
MYPATH=$(dirname $0)
source $1
SLIM_PORT=$2
APPLICATION_PATH=${TARGET_BUILD_DIR}/${EXECUTABLE_FOLDER_PATH}
DEPLOYMENT_TARGET_VALUE=$( echo "$DEPLOYMENT_TARGET_SUGGESTED_VALUES" | rev | cut -d " " -f1 | rev )

get_app_devicetypeid() {

	local DEVICETYPE_ID=
	local BOOTED_DEVICE_NAME=$(xcrun simctl list devices | grep "Booted" | cut -d "(" -f1 | awk '{gsub(/^ +| +$/,"")} {print $0}')
	
	if [ ! -z "$BOOTED_DEVICE_NAME" ]; then
		DEVICETYPE_ID=$(xcrun simctl list devicetypes | grep "^$BOOTED_DEVICE_NAME (com.apple" | cut -d "(" -f2 | cut -d ")" -f1)
	else
		DEVICETYPE_ID=$(xcrun simctl list devicetypes | grep "$DEVICE_TYPE" | tail -n1 | cut -d "(" -f2 | cut -d ")" -f1)
	fi
	
	if [ -z "$DEVICETYPE_ID" ]; then
		log "Device Type Identifier For $DEVICE_TYPE Missing"
		exit 1
	fi

	echo "$DEVICETYPE_ID, $DEPLOYMENT_TARGET_VALUE"
}

slim_system_wait() {
	
	local EXECUTABLE_PID=$(<.simctl.pid)
	local INTERVAL=1
	local COUNT=0

	log_hrule
	log "Waiting for System Under Test... (ProcessID: $EXECUTABLE_PID)";
	while ps -p $EXECUTABLE_PID > /dev/null
	do
		sleep $INTERVAL;
		((COUNT++))
	done
	log "System Under Test exited (running for $COUNT second(s))"
}

run_test_system() {

	local START_TIME=$(date '+%Y-%m-%d %H:%M:%S')
	start_slim

 	if [ $? == 0 ]; then 
	 	slim_system_wait
		print_test_system_log $START_TIME
	else 
		log_simctl_error
	fi
}

start_slim() {
	log "Starting System Under Test"
	log_hrule
	$MYPATH/simctl $APPLICATION_PATH $SLIM_PORT
}

print_test_system_log() {
	local STARTTIME=$1
	local LOGFILE=$($MYPATH/simctl log $STARTTIME)
	log "Reading log file: $LOGFILE"
	cat $LOGFILE
}

log_simctl_error() {
	log "**ABORTING** Slim Test System reported an error. Check the executiong log for more details"
	error "**ABORTING** Exit Code error detected when executing Slim Test Sytem with ($MYPATH/simctl)"
}

main() {
	log "RunSlimTestTargetWithSlimPort~iOS"
	log "Fitnesse Slim Port: $SLIM_PORT"
	log "Xcode Suggested SDK: $DEPLOYMENT_TARGET_VALUE"
	log "Xcode Build Product: $APPLICATION_PATH"
	run_test_system 
	exit $?
}

log() {
	echo "[OCSP_RUN] INFO: $1"
}

log_hrule() {
	log "------------------------------------------------"
}

error() {
	>&2 echo "[OCSP_RUN] ERROR: $1"
	exit 1
}

main
